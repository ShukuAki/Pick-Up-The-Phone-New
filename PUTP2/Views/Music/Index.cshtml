@model PUTP2.Models.PlaylistViewModel

@{
    ViewData["Title"] = "The Vault";
    ViewData["HidePlayerBar"] = "true";
}

<div class="vault-container">
    <a href="/Music/Profile" class="profile-button">
        <i class="fas fa-user"></i>
    </a>

    <button class="view-toggle-button" id="viewToggle">
        <i class="fas fa-th"></i>
    </button>

    <button class="theme-toggle-button" id="themeToggle">
        <i class="fas fa-moon"></i>
    </button>

    <h1 class="vault-title">The Vault</h1>

    <div class="filter-controls-container">
        <input type="text" id="playlistSearchInput" class="search-input" placeholder="Search Playlists...">
        <div class="dropdown-container">
            <button class="dropdown-button" id="levelDropdownButton">
                <span>Levels</span> <i class="fas fa-chevron-down"></i>
            </button>
            <div class="dropdown-content" id="levelDropdownContent">
                <a href="#" data-level="all">All</a>
                <a href="#" data-level="1">Level 1</a>
                <a href="#" data-level="2">Level 2</a>
                <a href="#" data-level="3">Level 3</a>
            </div>
        </div>
    </div>
    
    @if (ViewBag.Playlists != null)
    {
        <div class="playlist-cards-container">
            <div class="playlist-cards-grid">
                @{
                    var playlists = ViewBag.Playlists as IEnumerable<PUTP2.Models.PlaylistInfo>;
                    foreach (var playlist in playlists)
                    {
                        <div class="playlist-card-wrapper" data-playlist-id="@playlist.Id">
                            <div class="playlist-card" data-level="@playlist.Level">
                                <div class="playlist-card-inner">
                                    <div class="playlist-card-front">
                                        <div class="level-pattern"></div>
                                    </div>
                                    <div class="playlist-card-back">
                                        <div class="playlist-info">
                                            <h2>@playlist.Title</h2>
                                            <p>@playlist.TrackCount tracks â€¢ @playlist.Duration</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    }

    <a href="/Home/TuneInSplash" class="switch-view-button">
        <i class="fas fa-broadcast-tower"></i>
        <span>tune in</span>
    </a>

    <a href="/Music/Upload" class="upload-button">
        <i class="fas fa-plus"></i>
    </a>
</div>

@section Styles {
    <style>
        @@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:wght@400;700&display=swap');
        @@font-face {
            font-family: 'Americane';
            src: url('/fonts/Americane-Bold.woff2') format('woff2'),
                 url('/fonts/Americane-Bold.woff') format('woff');
            font-weight: bold;
            font-style: normal;
        }
        html, body, .vault-container, .playlist-cards-grid, .playlist-card-front, .playlist-card-back, .playlist-info, .playlist-info h2, .playlist-info p, .profile-button, .view-toggle-button, .theme-toggle-button, .switch-view-button, .upload-button {
            color: #171717 !important;
            font-family: 'IBM Plex Sans', Arial, sans-serif;
            font-weight: 400;
        }
        .vault-title, h1.page-title, h1.vault-title, h1 {
            font-family: 'Americane', Arial, sans-serif !important;
            font-weight: bold !important;
            color: #171717 !important;
        }
        .playlist-info h2, .panel-header h3, h2, h3, .sub-header {
            font-family: 'IBM Plex Sans', Arial, sans-serif !important;
            font-weight: 700 !important;
            color: #171717 !important;
        }
        .playlist-info p, .playlist-info, p, span, label, input, select, button, a, .status-text, .form-control, .dropdown-content a, .dropdown-button, .create-playlist-btn {
            font-family: 'IBM Plex Sans', Arial, sans-serif !important;
            font-weight: 400 !important;
            color: #171717 !important;
        }
        /* Hide the footer bar */
        .footer-nav {
            display: none !important;
        }

        .theme-toggle-button {
            position: absolute;
            top: 15px;
            right: 55px;
            color: var(--text-primary);
            font-size: 18px;
            z-index: 10;
            background: var(--interactive);
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
            display: none;
        }

        .theme-toggle-button:hover {
            background: var(--highlight);
            transform: scale(1.1);
        }

        .profile-button {
            position: absolute;
            top: 15px;
            left: 15px;
            color: var(--text-primary);
            font-size: 18px;
            text-decoration: none;
            z-index: 10;
            background: var(--interactive);
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .view-toggle-button {
            position: absolute;
            top: 15px;
            right: 15px;
            color: var(--text-primary);
            font-size: 18px;
            z-index: 10;
            background: var(--interactive);
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .view-toggle-button:hover,
        .profile-button:hover {
            background: var(--highlight);
            transform: scale(1.1);
        }

        .vault-container {
            position: relative;
            padding: 20px;
            padding-top: 20px;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            background-color: var(--bg-primary);
            color: var(--text-primary);
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .vault-title {
            text-align: center;
            margin-top: 20px;
            margin-bottom: 15px;
            font-size: 2.5em;
            color: #000000;
            transition: color 0.3s ease;
            text-transform: none !important;
        }

        .playlist-cards-container {
            position: relative;
            overflow: hidden;
        }

        .playlist-cards-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
            padding: 20px;
        }

        .playlist-cards-grid.grid-view {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            padding: 20px;
        }

        .playlist-cards-grid.side-scroll {
            display: flex;
            overflow-x: auto;
            scroll-snap-type: x mandatory;
            -webkit-overflow-scrolling: touch;
            padding: 20px;
            gap: 20px;
            width: 100%;
            align-items: center;
            scrollbar-width: none;
            -ms-overflow-style: none;
        }

        .playlist-cards-grid.side-scroll::-webkit-scrollbar {
            display: none;
        }

        .playlist-card-wrapper {
            width: 200px;
            height: 280px;
            perspective: 1000px;
            cursor: pointer;
            position: relative;
            background: transparent;
        }

        .playlist-card {
            position: relative;
            width: 100%;
            height: 100%;
            transform-style: preserve-3d;
            cursor: pointer;
            background: transparent;
        }

        .playlist-card-inner {
            position: relative;
            width: 100%;
            height: 100%;
            transition: transform 2s ease;
            transform-style: preserve-3d;
        }

        .playlist-card-wrapper:hover .playlist-card-inner {
            transform: rotateY(180deg);
        }

        .playlist-card-front, .playlist-card-back {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            border-radius: 15px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            background: transparent;
        }

        .playlist-card-front {
            background: transparent;
        }

        .playlist-card-back {
            transform: rotateY(180deg);
            padding: 20px;
        }

        .level-pattern {
            width: 100%;
            height: 100%;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
        }

        /* Level 1 playlists */
        [data-level="1"] .level-pattern {
            background-image: url('/images/level 01-pattern.jpg');
        }

        [data-level="1"] .playlist-card-front,
        [data-level="1"] .playlist-card-back {
            border: 2px solid var(--accent-color);
        }

        [data-level="1"] .playlist-card-back {
            background: linear-gradient(135deg, var(--bg-secondary), var(--secondary-accent));
            color: var(--text-primary);
        }

        /* Level 2 playlists */
        [data-level="2"] .level-pattern {
            background-image: url('/images/level 02-pattern.jpg');
        }

        [data-level="2"] .playlist-card-front,
        [data-level="2"] .playlist-card-back {
            border: 2px solid var(--interactive-color);
        }

        [data-level="2"] .playlist-card-back {
            background: linear-gradient(135deg, var(--accent-color), var(--secondary-accent));
            color: var(--text-primary);
        }

        /* Level 3 playlists */
        [data-level="3"] .level-pattern {
            background-image: url('/images/level 03-pattern.jpg');
        }

        [data-level="3"] .playlist-card-front,
        [data-level="3"] .playlist-card-back {
            border: 2px solid var(--highlight-color);
        }

        [data-level="3"] .playlist-card-back {
            background: linear-gradient(135deg, var(--secondary-accent), var(--accent-color));
            color: var(--text-primary);
        }

        @@media (max-width: 768px) {
            .view-toggle-button {
                display: flex;
            }

            .playlist-cards-container {
                width: 100%;
                overflow: hidden;
            }

            .playlist-cards-grid {
                display: flex;
                overflow-x: auto;
                scroll-snap-type: x mandatory;
                -webkit-overflow-scrolling: touch;
                padding: 20px;
                gap: 20px;
                width: 100%;
                align-items: center;
                scrollbar-width: none;
                -ms-overflow-style: none;
            }

            .playlist-cards-grid::-webkit-scrollbar {
                display: none;
            }

            /* Adjust side-scroll card size for mobile using vw and aspect-ratio */
            .playlist-cards-grid.side-scroll .playlist-card-wrapper {
                flex: 0 0 65vw;  /* Use viewport width for basis */
                width: 65vw;     /* Use viewport width */
                height: auto;    /* Let aspect-ratio handle height */
                aspect-ratio: 2 / 3; /* Maintain card proportions */
                scroll-snap-align: center;
                transform: scale(0.85);
                opacity: 0.5;
                transition: all 0.3s ease;
            }

            .playlist-cards-grid.side-scroll .playlist-card-wrapper.active {
                transform: scale(1);
                opacity: 1;
                z-index: 2;
            }

            /* Adjust grid view card size for mobile using aspect-ratio */
            .playlist-cards-grid.grid-view .playlist-card-wrapper {
                flex: 1 1 calc(33.333% - 15px); /* Adjusted gap slightly */
                width: auto;
                height: auto; /* Let aspect-ratio handle height */
                aspect-ratio: 2 / 3; /* Maintain card proportions */
                transform: scale(1);
                opacity: 1;
            }

            .playlist-cards-grid.grid-view {
                 gap: 15px; /* Match adjusted gap */
                 padding: 15px; /* Adjust padding */
            }
        }

        .playlist-info {
            text-align: center;
            color: var(--text-primary);
        }

        .playlist-info h2 {
            margin: 0;
            font-size: 24px;
            color: var(--text-primary);
            margin-bottom: 10px;
        }

        .playlist-info p {
            margin: 5px 0 0;
            font-size: 14px;
            color: var(--text-secondary);
        }

        .delete-playlist-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background: var(--text-secondary);
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            color: var(--bg-primary);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: 10;
        }

        .playlist-card-wrapper:hover .delete-playlist-btn {
            opacity: 1;
        }

        .delete-playlist-btn:hover {
            background: var(--accent-color);
        }

        body[data-hide-player="true"] .player-bar {
            display: none;
        }

        .switch-view-button {
            position: fixed;
            bottom: 80px;
            left: 50%;
            transform: translateX(-50%);
            background: #bf6713;
            color: #000000;
            text-decoration: none;
            padding: 8px 16px;
            border-radius: 20px;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
            z-index: 999;
        }

        .switch-view-button:hover {
            background: #f5e5d1;
            color: #000000;
            transform: translateX(-50%) scale(1.05);
        }

        .switch-view-button i {
            font-size: 16px;
            color: #000000;
            transition: color 0.3s ease;
        }

        .switch-view-button:hover i {
            color: #000000;
        }

        .switch-view-button span {
            text-transform: none !important;
        }

        .upload-button {
            position: fixed;
            bottom: 80px;
            right: 20px;
            background: var(--interactive);
            color: var(--text-primary);
            text-decoration: none;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            transition: all 0.3s ease;
            z-index: 999;
        }

        .upload-button:hover {
            background: var(--highlight);
            transform: scale(1.1);
        }

        /* Remove footer-related styles */
        .content-wrapper {
            height: 100vh;
        }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: var(--bg-primary);
            color: var(--text-primary);
            padding: 20px;
            border-radius: 10px;
            width: 80%;
            max-width: 400px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .modal-buttons {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 20px;
        }

        .confirm-delete {
            background-color: var(--accent-color);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .cancel-delete {
            background-color: var(--bg-secondary);
            color: var(--text-primary);
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .confirm-delete:hover {
            background-color: var(--highlight);
        }

        .cancel-delete:hover {
            background-color: var(--interactive);
        }

        /* Added Filter Controls Styles (copied from TuneIn.cshtml) */
        .filter-controls-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-bottom: 25px;
            gap: 15px;
            padding: 0 20px;
        }

        .search-input {
            padding: 10px 15px;
            border-radius: 20px;
            border: 1px solid var(--borders);
            background-color: var(--card-bg);
            color: var(--text-primary);
            font-size: 1em;
            width: 100%;
            max-width: 400px; 
            box-sizing: border-box;
            transition: all 0.3s ease;
        }

        .search-input:focus {
            outline: none;
            border-color: var(--interactive);
            box-shadow: 0 0 5px rgba(136, 201, 230, 0.5); 
        }

        .dropdown-container {
            position: relative;
            display: inline-block;
            width: 100%; 
            max-width: 400px; 
        }

        .dropdown-button {
            background-color: #bf6713;
            color: #000000;
            padding: 10px 20px;
            font-size: 1em;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
            transition: background-color 0.3s ease;
            text-transform: none !important;
        }

        .dropdown-button:hover {
            background-color: #f5e5d1;
            color: #000000;
        }
        
        .dropdown-button i {
            margin-left: 8px;
            transition: transform 0.3s ease;
            color: #000000;
        }

        .dropdown-container.open .dropdown-button i {
             transform: rotate(180deg);
        }

        .dropdown-content {
            display: none;
            position: absolute;
            background-color: var(--card-bg);
            min-width: 160px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 100;
            border-radius: 8px;
            overflow: hidden; 
            margin-top: 5px;
            border: 1px solid var(--borders);
            width: 100%; 
            text-transform: none !important;
        }

        .dropdown-content a {
            color: var(--text-primary);
            padding: 12px 16px;
            text-decoration: none;
            display: block;
            transition: background-color 0.2s ease;
        }

        .dropdown-content a:hover {
            background-color: var(--interactive);
            color: var(--text-primary); 
        }

        /* Updated Switch View Button Colors */
        .switch-view-button {
            position: fixed;
            bottom: 80px;
            left: 50%;
            transform: translateX(-50%);
            background: #bf6713;
            color: #000000;
            text-decoration: none;
            padding: 8px 16px;
            border-radius: 20px;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
            z-index: 999;
        }

        .switch-view-button:hover {
            background: #f5e5d1;
            color: #000000;
            transform: translateX(-50%) scale(1.05);
        }

        .switch-view-button i {
            font-size: 16px;
            color: #000000;
            transition: color 0.3s ease;
        }

        .switch-view-button:hover i {
            color: #000000;
        }

        /* Responsive adjustments (copied from TuneIn.cshtml) */
        @@media (min-width: 768px) {
            .filter-controls-container {
                flex-direction: row;
                justify-content: space-between;
                max-width: 800px;
                margin-left: auto;
                margin-right: auto;
            }

            .search-input {
                width: auto;
                flex-grow: 1;
                margin-right: 20px;
                max-width: none;
            }

            .dropdown-container {
                width: auto; 
                max-width: none;
            }

            .dropdown-button {
                width: auto; 
                min-width: 120px; 
            }

            .dropdown-content {
                width: auto; 
            }
        }
    </style>
}

@section Scripts {
    <script>
        function hidePlaylistCard(id) {
            const card = document.querySelector(`[data-playlist-id='${id}']`);
            if (card) {
                card.style.display = 'none';
            }
        }

        document.addEventListener('click', function(event) {
            const modal = document.querySelector('.modal');
            if (modal && event.target === modal) {
                closeModal();
            }
        });

        document.addEventListener('DOMContentLoaded', function() {
            const viewToggle = document.getElementById('viewToggle');
            const playlistGrid = document.querySelector('.playlist-cards-grid');
            let isGridView = false;

            viewToggle.addEventListener('click', function() {
                isGridView = !isGridView;
                playlistGrid.classList.toggle('grid-view', isGridView);
                playlistGrid.classList.toggle('side-scroll', !isGridView);
                
                // Update button icon
                viewToggle.innerHTML = isGridView ? 
                    '<i class="fas fa-list"></i>' : 
                    '<i class="fas fa-th"></i>';
            });

            // Initialize view based on screen size
            function updateView() {
                if (window.innerWidth <= 768) {
                    playlistGrid.classList.add('side-scroll');
                    playlistGrid.classList.remove('grid-view');
                    isGridView = false;
                    viewToggle.innerHTML = '<i class="fas fa-th"></i>';
                } else {
                    playlistGrid.classList.remove('side-scroll');
                    playlistGrid.classList.remove('grid-view');
                    isGridView = false;
                }
            }

            // Update view on window resize
            window.addEventListener('resize', updateView);
            updateView();

            // Click handler for playlist navigation
            const cards = document.querySelectorAll('.playlist-card-wrapper');
            cards.forEach(card => {
                card.addEventListener('click', function(e) {
                    if (e.target.closest('.delete-playlist-btn')) return;
                    const playlistId = this.dataset.playlistId;
                    window.location.href = `/Music/Playlist/${playlistId}`;
                });
            });

            // Theme toggle functionality
            const themeToggle = document.getElementById('themeToggle');
            const moonIcon = '<i class="fas fa-moon"></i>';
            const sunIcon = '<i class="fas fa-sun"></i>';

            // Apply theme from localStorage on page load
            function applyTheme() {
                const savedTheme = localStorage.getItem('theme');
                if (savedTheme) {
                    document.documentElement.setAttribute('data-theme', savedTheme);
                    themeToggle.innerHTML = savedTheme === 'dark' ? sunIcon : moonIcon;
                }
            }

            // Initial theme application
            applyTheme();

            // Theme toggle functionality
            themeToggle.addEventListener('click', () => {
                const currentTheme = document.documentElement.getAttribute('data-theme');
                const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
                
                document.documentElement.setAttribute('data-theme', newTheme);
                localStorage.setItem('theme', newTheme);
                themeToggle.innerHTML = newTheme === 'dark' ? sunIcon : moonIcon;
            });

            // --- Search and Filter Logic (Copied & Adapted) --- 
            const searchInput = document.getElementById('playlistSearchInput');
            const levelDropdownButton = document.getElementById('levelDropdownButton');
            const levelDropdownContent = document.getElementById('levelDropdownContent');
            const levelDropdownContainer = levelDropdownButton.closest('.dropdown-container');
            const dropdownLinks = levelDropdownContent.querySelectorAll('a');
            
            const allPlaylistCards = document.querySelectorAll('.playlist-card-wrapper'); // Selector for Index page cards
            let currentLevelFilter = 'all';
            let currentSearchTerm = '';
            let searchTimeout;

            function filterPlaylists() {
                 allPlaylistCards.forEach(card => {
                    const level = card.querySelector('.playlist-card')?.dataset.level || '0'; // Get level from inner card
                    // Find title within the back face of the card
                    const titleElement = card.querySelector('.playlist-card-back .playlist-info h2'); 
                    const title = titleElement ? titleElement.textContent.toLowerCase() : '';

                    const levelMatch = currentLevelFilter === 'all' || level === currentLevelFilter;
                    const searchMatch = currentSearchTerm === '' || title.includes(currentSearchTerm);

                    if (levelMatch && searchMatch) {
                        card.style.display = ''; // Show card wrapper
                    } else {
                        card.style.display = 'none'; // Hide card wrapper
                    }
                });
            }

            // Search Input Handler (copied)
            searchInput.addEventListener('input', () => {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    currentSearchTerm = searchInput.value.toLowerCase().trim();
                    filterPlaylists();
                }, 300); // Debounce search input
            });

            // Dropdown Logic (copied)
            levelDropdownButton.addEventListener('click', (event) => {
                event.stopPropagation(); 
                const isOpen = levelDropdownContent.style.display === 'block';
                levelDropdownContent.style.display = isOpen ? 'none' : 'block';
                levelDropdownContainer.classList.toggle('open', !isOpen);
            });

            dropdownLinks.forEach(link => {
                link.addEventListener('click', (event) => {
                    event.preventDefault(); 
                    currentLevelFilter = link.dataset.level;
                    levelDropdownButton.querySelector('span').textContent = link.textContent; 
                    levelDropdownContent.style.display = 'none'; 
                    levelDropdownContainer.classList.remove('open');
                    filterPlaylists();
                });
            });

            window.addEventListener('click', (event) => {
                 if (!levelDropdownContainer.contains(event.target)) {
                    levelDropdownContent.style.display = 'none';
                    levelDropdownContainer.classList.remove('open');
                }
            });

            // Initial filter call 
            filterPlaylists(); 

            // --- Mobile active card highlight for side-scroll ---
            if (window.matchMedia('(max-width: 768px)').matches) {
                const container = document.querySelector('.playlist-cards-grid');
                const cards = Array.from(container.querySelectorAll('.playlist-card-wrapper'));
                function updateActiveCard() {
                    if (!container.classList.contains('side-scroll')) return;
                    const middle = container.scrollLeft + (container.offsetWidth / 2);
                    let closestCard = null;
                    let closestDistance = Infinity;
                    cards.forEach(card => {
                        const cardMiddle = card.offsetLeft + (card.offsetWidth / 2);
                        const distance = Math.abs(middle - cardMiddle);
                        if (distance < closestDistance) {
                            closestDistance = distance;
                            closestCard = card;
                        }
                        card.classList.remove('active');
                    });
                    if (closestCard) {
                        closestCard.classList.add('active');
                    }
                }
                let scrollTimeout;
                container.addEventListener('scroll', function() {
                    clearTimeout(scrollTimeout);
                    scrollTimeout = setTimeout(updateActiveCard, 100);
                }, { passive: true });
                updateActiveCard();
                window.addEventListener('resize', updateActiveCard, { passive: true });
            }
        });
    </script>
} 