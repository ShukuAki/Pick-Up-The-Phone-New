@{
    ViewData["Title"] = "Record/Upload TuneIn Track";
    ViewData["HidePlayerBar"] = "true";
    ViewData["HideFooterNav"] = "true";
    var playlistId = ViewBag.PlaylistId as string;
    var playlistTitle = ViewBag.PlaylistTitle as string;
}

<div class="record-upload-container">
    <a asp-action="TuneInPlaylist" asp-controller="Music" asp-route-id="@playlistId" class="back-button">
        <i class="fas fa-arrow-left"></i>
    </a>

    <h1 class="page-title custom-title">Record or Upload for "@playlistTitle"</h1>

    <div class="panels-container">

        <!-- Recording Panel -->
        <div class="panel recording-panel">
            <div class="panel-header custom-panel-header">
                <i class="fas fa-microphone panel-icon"></i>
                <h3 class="custom-panel-title">Record New Track</h3>
            </div>
            <div class="panel-content">
                <div class="form-group">
                    <label for="recordingName">Track Name:</label>
                    <input type="text" id="recordingName" class="form-control" placeholder="Enter name for recording" />
                </div>
                <div class="form-group">
                    <label for="recordingAgeGroup">Age Group:</label>
                    <select id="recordingAgeGroup" class="form-control">
                        <option value="Young">Grandchild</option>
                        <option value="Old">Grandparent</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="recordingLocation">Location:</label>
                    <input type="text" id="recordingLocation" class="form-control" placeholder="Enter location" />
                </div>
                <div class="form-group">
                    <label for="recordingImage">Image (optional):</label>
                    <input type="file" id="recordingImage" class="form-control" accept="image/*" />
                </div>
                <div class="recording-controls">
                    <button id="startRecording" class="btn btn-record custom-start-btn"><i class="fas fa-circle"></i> Start</button>
                    <button id="stopRecording" class="btn btn-stop" disabled><i class="fas fa-stop"></i> Stop</button>
                </div>
                <div id="recordingStatus" class="status-text"></div>
                <audio id="audioPlayback" controls style="display: none; width: 100%; margin-top: 15px;"></audio>
                <button id="uploadRecordingButton" class="btn btn-upload" style="display: none; margin-top: 10px;">Upload Recording</button>
            </div>
        </div>

        <!-- Upload Panel -->
        <div class="panel upload-panel">
            <div class="panel-header custom-panel-header">
                 <i class="fas fa-upload panel-icon"></i>
                <h3 class="custom-panel-title">Upload MP3 File</h3>
            </div>
             <div class="panel-content">
                <form id="uploadForm" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="playlistId" value="@playlistId" />
                    
                    <div class="form-group">
                        <label for="uploadTrackName">Track Name:</label>
                        <input type="text" id="uploadTrackName" name="trackName" class="form-control" placeholder="Enter track name" required />
                    </div>
                    <div class="form-group">
                        <label for="uploadAgeGroup">Age Group:</label>
                        <select id="uploadAgeGroup" name="ageGroup" class="form-control">
                            <option value="Young">GrandChild</option>
                            <option value="Old">Grandparents</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="uploadLocation">Location:</label>
                        <input type="text" id="uploadLocation" name="location" class="form-control" placeholder="Enter location" />
                    </div>
                    <div class="form-group">
                        <label for="uploadImage">Image (optional):</label>
                        <input type="file" id="uploadImage" name="imageFile" class="form-control" accept="image/*" />
                    </div>
                    <div class="form-group">
                        <label for="trackFile">MP3 File:</label>
                        <input type="file" id="trackFile" name="trackFile" class="form-control" accept=".mp3" required />
                    </div>
                    <button type="submit" class="btn btn-upload">Upload File</button>
                    <div id="uploadStatus" class="status-text"></div>
                </form>
            </div>
        </div>

    </div> 

</div>

@section Styles {
    <style>
        @@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:wght@400;700&display=swap');
        @@font-face {
            font-family: 'Americane';
            src: url('/fonts/Americane-Bold.woff2') format('woff2'),
                 url('/fonts/Americane-Bold.woff') format('woff');
            font-weight: bold;
            font-style: normal;
        }
        html, body, .record-upload-container, .panels-container, .panel, .panel-header, .panel-content, .form-group, .form-group label, .form-control, .btn, .status-text {
            color: #171717 !important;
            font-family: 'IBM Plex Sans', Arial, sans-serif;
            font-weight: 400;
        }
        .page-title, h1.page-title, h1 {
            font-family: 'Americane', Arial, sans-serif !important;
            font-weight: bold !important;
            color: #171717 !important;
        }
        .panel-header h3, h2, h3, .custom-panel-title, .sub-header {
            font-family: 'IBM Plex Sans', Arial, sans-serif !important;
            font-weight: 700 !important;
            color: #171717 !important;
        }
        .form-group label, .form-control, .btn, .status-text, p, span, label, input, select, button, a {
            font-family: 'IBM Plex Sans', Arial, sans-serif !important;
            font-weight: 400 !important;
            color: #171717 !important;
        }
        .footer-nav { display: none !important; }
        body { background-color: var(--bg-primary); }

        .record-upload-container {
            padding: 20px;
            padding-top: 70px;
            max-width: 900px;
            margin: 0 auto;
            color: var(--text-primary);
        }

        .back-button {
            position: absolute;
            top: 15px;
            left: 15px;
            color: var(--text-primary);
            font-size: 18px;
            text-decoration: none;
            z-index: 10;
            background: var(--interactive, #A0D8EF);
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            border: 1px solid var(--text-secondary, rgba(0,0,0,0.1));
        }
        .back-button:hover {
            background: var(--highlight, #F2C94C);
            transform: scale(1.1);
        }

        .page-title {
            text-align: center;
            margin-bottom: 40px;
            color: var(--text-primary);
            font-size: 2.2em;
        }

        .panels-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
        }

        .panel {
            background-color: var(--bg-secondary, #f8f9fa);
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
            overflow: hidden;
        }

        .panel-header {
            padding: 15px 20px;
            background-color: var(--secondary-accent, #e9ecef);
            display: flex;
            align-items: center;
            gap: 10px;
            border-bottom: 1px solid var(--accent-color, #dee2e6);
        }
        .panel-header h3 {
            margin: 0;
            font-size: 1.2em;
            color: var(--text-primary);
        }
        .panel-icon {
            font-size: 1.3em;
            color: var(--text-secondary);
        }

        .panel-content {
            padding: 20px;
        }

        .form-group {
            margin-bottom: 15px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        .form-control {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--accent-color, #ccc);
            border-radius: 4px;
            background-color: var(--bg-primary, #fff);
            color: var(--text-primary);
            font-size: 1em;
        }
        input[type="file"].form-control {
             padding: 5px;
        }

        .recording-controls {
            display: flex;
            gap: 15px;
            margin: 20px 0;
        }

        .btn {
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1em;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }
        .btn i {
             margin-right: 5px;
        }

        .btn-record {
            background-color: var(--text-secondary, #dc3545);
            color: var(--bg-primary, white);
            flex-grow: 1;
        }
        .btn-record:hover {
             filter: brightness(1.1);
        }

        .btn-stop {
             background-color: #6c757d;
             color: white;
             flex-grow: 1;
        }
         .btn-stop:disabled {
             opacity: 0.5;
             cursor: not-allowed;
         }
        .btn-stop:not(:disabled):hover {
             background-color: #5a6268;
        }

        .btn-upload {
            background-color: var(--interactive);
            color: var(--text-primary);
            width: 100%;
        }
         .btn-upload:hover {
            background-color: var(--highlight);
         }

        .status-text {
            margin-top: 10px;
            color: var(--text-secondary);
            font-size: 0.9em;
        }

        @@media (max-width: 768px) {
            .panels-container {
                grid-template-columns: 1fr;
            }
        }

        .custom-title {
            text-transform: none !important;
            font-weight: bold;
            color: #3a2c1a;
        }
        .custom-panel-header {
            background-color: #F28822 !important;
            color: #3a2c1a !important;
        }
        .custom-panel-title {
            text-transform: none !important;
            font-weight: bold;
            color: #3a2c1a !important;
        }
        .custom-start-btn {
            background-color: #f5e5d1 !important;
            color: #3a2c1a !important;
            border: none;
        }
        .custom-start-btn:hover {
            background-color: #ffe2b8 !important;
        }
        .btn-stop {
            background-color: #bcbcbc;
            color: #fff;
        }
        .btn-stop:not(:disabled):hover {
            background-color: #888;
        }
        .btn-upload {
            background-color: #F28822 !important;
            color: #3a2c1a !important;
        }
        .btn-upload:hover {
            background-color: #f5e5d1 !important;
            color: #3a2c1a !important;
        }
        .panel.upload-panel .panel-header {
            background-color: #F28822 !important;
            color: #3a2c1a !important;
        }
        .panel.upload-panel .panel-header h3 {
            text-transform: none !important;
            font-weight: bold;
            color: #3a2c1a !important;
        }
        .page-title, .custom-title {
            text-transform: none !important;
        }
        .panel-header h3, .custom-panel-title {
            text-transform: none !important;
        }
        .btn, .btn-upload, .btn-record, .btn-stop {
            text-transform: none !important;
        }
    </style>
}

@section Scripts {
    <script>
        let mediaRecorder;
        let audioChunks = [];
        let isRecording = false;

        // Recording functionality
        document.getElementById('startRecording').addEventListener('click', async () => {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                mediaRecorder = new MediaRecorder(stream);
                audioChunks = [];

                mediaRecorder.ondataavailable = (event) => {
                    audioChunks.push(event.data);
                };

                mediaRecorder.onstop = () => {
                    const audioBlob = new Blob(audioChunks, { type: 'audio/mp3' });
                    const audioUrl = URL.createObjectURL(audioBlob);
                    const audioPlayback = document.getElementById('audioPlayback');
                    audioPlayback.src = audioUrl;
                    audioPlayback.style.display = 'block';
                    document.getElementById('uploadRecordingButton').style.display = 'block';
                };

                mediaRecorder.start();
                isRecording = true;
                document.getElementById('startRecording').disabled = true;
                document.getElementById('stopRecording').disabled = false;
                document.getElementById('recordingStatus').textContent = 'Recording...';
            } catch (err) {
                console.error('Error accessing microphone:', err);
                document.getElementById('recordingStatus').textContent = 'Error accessing microphone';
            }
        });

        document.getElementById('stopRecording').addEventListener('click', () => {
            if (mediaRecorder && isRecording) {
                mediaRecorder.stop();
                isRecording = false;
                document.getElementById('startRecording').disabled = false;
                document.getElementById('stopRecording').disabled = true;
                document.getElementById('recordingStatus').textContent = 'Recording stopped';
            }
        });

        // Upload recording
        document.getElementById('uploadRecordingButton').addEventListener('click', async () => {
            const trackName = document.getElementById('recordingName').value;
            const ageGroup = document.getElementById('recordingAgeGroup').value;
            const location = document.getElementById('recordingLocation').value;
            const imageFile = document.getElementById('recordingImage').files[0];
            const audioBlob = new Blob(audioChunks, { type: 'audio/mp3' });

            if (!trackName) {
                alert('Please enter a track name');
                return;
            }

            const formData = new FormData();
            formData.append('audioFile', audioBlob, 'recording.mp3');
            formData.append('trackName', trackName);
            formData.append('playlistId', '@playlistId');
            formData.append('ageGroup', ageGroup);
            formData.append('location', location);
            if (imageFile) {
                formData.append('imageFile', imageFile);
            }

            try {
                const response = await fetch('/Music/SaveTuneInRecording', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                if (result.success) {
                    window.location.href = `/Music/TuneInPlaylist/${'@playlistId'}`;
                } else {
                    document.getElementById('recordingStatus').textContent = 'Upload failed: ' + result.message;
                }
            } catch (err) {
                console.error('Error uploading recording:', err);
                document.getElementById('recordingStatus').textContent = 'Error uploading recording';
            }
        });

        // File upload functionality
        document.getElementById('uploadForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            const statusElement = document.getElementById('uploadStatus');

            try {
                const response = await fetch('/Music/UploadTuneInTrack', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                if (result.success) {
                    window.location.href = `/Music/TuneInPlaylist/${'@playlistId'}`;
                } else {
                    statusElement.textContent = 'Upload failed: ' + result.message;
                }
            } catch (err) {
                console.error('Error uploading file:', err);
                statusElement.textContent = 'Error uploading file';
            }
        });
    </script>
} 