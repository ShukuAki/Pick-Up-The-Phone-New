@model PUTP2.Models.PlaylistViewModel
@{
    Layout = "~/Views/Shared/_TrackLayout.cshtml";
    ViewData["Title"] = Model.Tracks.FirstOrDefault()?.Name ?? "Track";
}

<div class="container">
    <div class="track-header">
        <div class="row align-items-center">
            <div class="col-md-3">
                <div class="track-icon">
                    <i class="fas fa-music"></i>
                </div>
            </div>
            <div class="col-md-9">
                <h1 class="text-white">@Model.Tracks.FirstOrDefault()?.Name</h1>
                <p class="text-muted">@Model.Tracks.FirstOrDefault()?.Artist</p>
                <div class="track-actions">
                    <button class="btn btn-primary play-button" onclick="playTrack('@Model.Tracks.FirstOrDefault()?.Id', '@Model.Tracks.FirstOrDefault()?.Name', '@Model.Tracks.FirstOrDefault()?.FilePath')">
                        <i class="fas fa-play"></i> Play
                    </button>
                    <button class="btn btn-like" id="likeButton" onclick="toggleLike()">
                        <i class="far fa-heart"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="track-details mt-4">
        <div class="table-responsive">
            <table class="table table-dark table-hover">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Artist</th>
                        <th>Duration</th>
                        <th>Upload Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var track in Model.Tracks)
                    {
                        <tr class="track-row" data-track-id="@track.Id">
                            <td>@track.Name</td>
                            <td>@track.Artist</td>
                            <td>@track.Duration</td>
                            <td>@track.UploadDate.ToString("MMM dd, yyyy")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Audio Player -->
    <div id="audioPlayerContainer" class="spotify-player" style="display: none;">
        <div class="player-progress">
            <div id="progressBar" class="progress-bar"></div>
        </div>
        <div class="player-content">
            <div class="container-fluid">
                <div class="row align-items-center">
                    <div class="col-md-3 now-playing">
                        <div class="d-flex align-items-center">
                            <div class="track-info">
                                <span id="currentTrackName" class="track-name"></span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 text-center">
                        <div class="player-controls">
                            <button class="control-button play-pause" id="playPauseMain">
                                <i class="fas fa-play"></i>
                            </button>
                        </div>
                        <div class="playback-bar">
                            <span id="currentTime" class="time">0:00</span>
                            <div class="progress-container">
                                <input type="range" id="seekSlider" class="seek-slider" min="0" max="100" value="0">
                                <div class="progress-bar-container">
                                    <div id="progressBar" class="progress-bar"></div>
                                </div>
                            </div>
                            <audio id="audioPlayer" class="d-none">
                                Your browser does not support the audio element.
                            </audio>
                            <span id="duration" class="time">0:00</span>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="volume-control">
                            <i class="fas fa-volume-up"></i>
                            <input type="range" id="volumeSlider" min="0" max="100" value="100">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .track-header {
            padding: 30px;
            background: #1a1a1a;
            border-radius: 10px;
            margin-bottom: 20px;
        }

        .track-icon {
            width: 200px;
            height: 200px;
            background: #2a2a2a;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        }

        .track-icon i {
            font-size: 80px;
            color: #b3b3b3;
        }

        .track-actions {
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }

        .btn-like {
            background: none;
            border: none;
            color: #b3b3b3;
            font-size: 24px;
            padding: 0;
            cursor: pointer;
            transition: color 0.2s;
        }

        .btn-like:hover {
            color: #ffffff;
        }

        .btn-like.liked {
            color: #1db954;
        }

        .btn-like.liked:hover {
            color: #1ed760;
        }

        .table {
            background: #2a2a2a;
            border-radius: 8px;
        }

        .track-row {
            cursor: pointer;
        }

        .track-row:hover {
            background: #333333 !important;
        }

        .spotify-player {
            position: fixed;
            bottom: 60px;
            left: 0;
            right: 0;
            background-color: #181818;
            border-top: 1px solid #282828;
            z-index: 1000;
        }

        .player-progress {
            width: 100%;
            height: 4px;
            background-color: #4f4f4f;
            cursor: pointer;
        }

        .player-progress .progress-bar {
            height: 100%;
            background-color: #1db954;
            width: 0;
            transition: width 0.1s linear;
        }

        .player-content {
            padding: 16px 0;
        }

        .now-playing {
            padding: 0 16px;
        }

        .track-info {
            margin-left: 12px;
        }

        .track-name {
            color: #ffffff;
            font-size: 14px;
            margin: 0;
            display: block;
        }

        .player-controls {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 24px;
            margin-bottom: 12px;
        }

        .control-button {
            background: none;
            border: none;
            color: #b3b3b3;
            cursor: pointer;
            padding: 0;
            font-size: 16px;
            transition: color 0.2s;
        }

        .control-button:hover {
            color: #ffffff;
        }

        .play-pause {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #ffffff;
            color: #000000;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
        }

        .play-pause:hover {
            transform: scale(1.1);
            color: #000000;
        }
    </style>
}

@section Scripts {
    <script>
        // Like functionality - purely visual
        let isLiked = false;
        const likeButton = document.getElementById('likeButton');

        function toggleLike() {
            isLiked = !isLiked;
            likeButton.classList.toggle('liked');
            likeButton.querySelector('i').classList.toggle('far');
            likeButton.querySelector('i').classList.toggle('fas');
        }

        // Audio player functionality
        let audioPlayer = document.getElementById('audioPlayer');
        let playPauseButton = document.getElementById('playPauseMain');
        let progressBar = document.getElementById('progressBar');
        let seekSlider = document.getElementById('seekSlider');
        let currentTimeDisplay = document.getElementById('currentTime');
        let durationDisplay = document.getElementById('duration');
        let volumeSlider = document.getElementById('volumeSlider');

        function playTrack(trackId, trackName, filePath) {
            audioPlayer.src = filePath;
            audioPlayer.play();
            document.getElementById('currentTrackName').textContent = trackName;
            document.getElementById('audioPlayerContainer').style.display = 'block';
            playPauseButton.innerHTML = '<i class="fas fa-pause"></i>';
        }

        playPauseButton.addEventListener('click', function() {
            if (audioPlayer.paused) {
                audioPlayer.play();
                this.innerHTML = '<i class="fas fa-pause"></i>';
            } else {
                audioPlayer.pause();
                this.innerHTML = '<i class="fas fa-play"></i>';
            }
        });

        audioPlayer.addEventListener('timeupdate', function() {
            let progress = (audioPlayer.currentTime / audioPlayer.duration) * 100;
            progressBar.style.width = progress + '%';
            seekSlider.value = progress;
            currentTimeDisplay.textContent = formatTime(audioPlayer.currentTime);
        });

        seekSlider.addEventListener('input', function() {
            let seekTime = (audioPlayer.duration * this.value) / 100;
            audioPlayer.currentTime = seekTime;
        });

        volumeSlider.addEventListener('input', function() {
            audioPlayer.volume = this.value / 100;
        });

        function formatTime(seconds) {
            let minutes = Math.floor(seconds / 60);
            seconds = Math.floor(seconds % 60);
            return minutes + ':' + (seconds < 10 ? '0' : '') + seconds;
        }

        audioPlayer.addEventListener('loadedmetadata', function() {
            durationDisplay.textContent = formatTime(audioPlayer.duration);
        });
    </script>
} 