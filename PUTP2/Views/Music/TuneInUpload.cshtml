@model PUTP2.Models.UploadViewModel

@{
    ViewData["Title"] = "TuneIn Upload";
    ViewData["HidePlayerBar"] = "true";
    var playlistId = Model.SelectedPlaylistId;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>tune in</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background-color: #000000;
            color: #ffffff;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .app-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            width: 100%;
        }

        .content-wrapper {
            display: flex;
            flex: 1;
            overflow: hidden;
            padding: 20px;
            gap: 20px;
            height: calc(100vh - 60px);
        }

        .sidebar-container {
            width: 300px;
            flex-shrink: 0;
            background: #181818;
            border-radius: 8px;
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        .sidebar {
            padding: 20px;
            overflow-y: auto;
            flex: 1;
        }

        .sidebar h2 {
            font-size: 24px;
            margin-bottom: 20px;
            font-weight: normal;
        }

        .create-playlist {
            background-color: #282828;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .playlists {
            display: flex;
            flex-direction: column;
            gap: 10px;
            padding-bottom: 20px;
        }

        .playlist-item {
            display: flex;
            gap: 12px;
            padding: 8px;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .playlist-item:hover {
            background-color: #282828;
        }

        .playlist-cover {
            width: 48px;
            height: 48px;
            flex-shrink: 0;
        }

        .playlist-cover img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 4px;
        }

        .playlist-info h4 {
            margin: 0;
            font-size: 14px;
            font-weight: normal;
        }

        .playlist-info p {
            margin: 4px 0 0;
            font-size: 12px;
            color: #b3b3b3;
        }

        .main-container {
            flex: 1;
            background: #181818;
            border-radius: 8px;
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        .main-content {
            padding: 20px;
            overflow-y: auto;
            flex: 1;
        }

        .upload-section {
            max-width: 1200px;
            margin: 0 auto;
        }

        .upload-section h2 {
            font-size: 24px;
            margin-bottom: 30px;
            font-weight: normal;
        }

        .content-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .panel {
            background-color: #282828;
            border-radius: 8px;
            overflow: hidden;
        }

        .panel-header {
            padding: 20px;
            text-align: center;
        }

        .icon-circle {
            width: 64px;
            height: 64px;
            background-color: #181818;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 15px;
        }

        .icon-circle i {
            font-size: 24px;
            color: #1db954;
        }

        .panel-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: normal;
        }

        .panel-content {
            padding: 20px;
        }

        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            width: 100%;
        }

        .btn-success {
            background-color: #1db954;
            color: white;
        }

        .btn-danger {
            background-color: #dc3545;
            color: white;
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .form-group {
            margin-bottom: 10px;
        }

        .form-control {
            width: 100%;
            padding: 8px;
            border: 1px solid #404040;
            border-radius: 4px;
            background-color: #282828;
            color: white;
            font-size: 14px;
        }

        .form-control::placeholder {
            color: #b3b3b3;
        }

        .empty-state {
            text-align: center;
            padding: 40px;
            color: #b3b3b3;
        }

        .empty-state i {
            font-size: 48px;
            margin-bottom: 20px;
        }

        .empty-state h3 {
            margin: 0 0 10px;
            font-size: 18px;
            font-weight: normal;
        }

        .empty-state p {
            margin: 0;
            font-size: 14px;
        }

        .back-button {
            position: fixed;
            top: 20px;
            left: 20px;
            color: #ffffff;
            font-size: 24px;
            text-decoration: none;
            z-index: 1000;
            background: rgba(0, 0, 0, 0.5);
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .back-button:hover {
            background: rgba(0, 0, 0, 0.7);
            transform: scale(1.1);
        }

        /* Footer Navigation */
        .footer-nav {
            display: none !important;
        }

        .nav-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-decoration: none;
            color: #b3b3b3;
            font-size: 12px;
            transition: color 0.2s;
        }

        .nav-item:hover {
            color: #ffffff;
        }

        .nav-item i {
            font-size: 20px;
            margin-bottom: 4px;
        }

        .nav-item.active {
            color: #1db954;
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .content-wrapper {
                padding: 10px;
                gap: 10px;
            }

            .content-grid {
                grid-template-columns: 1fr;
            }

            .panel {
                margin-bottom: 10px;
            }
        }

        @@media (max-width: 480px) {
            .content-wrapper {
                padding: 5px;
            }

            .upload-section h2 {
                font-size: 20px;
                margin-bottom: 20px;
            }

            .icon-circle {
                width: 48px;
                height: 48px;
            }

            .icon-circle i {
                font-size: 20px;
            }

            .panel-header h3 {
                font-size: 16px;
            }

            .btn {
                padding: 6px 12px;
                font-size: 12px;
            }

            .form-control {
                padding: 6px;
                font-size: 12px;
            }

            .nav-item i {
                font-size: 16px;
            }

            .nav-item span {
                font-size: 10px;
            }
        }
    </style>
</head>
<body>
    <a href="/Music/TuneIn" class="back-button">
        <i class="fas fa-chevron-left"></i>
    </a>

    <button class="sidebar-toggle" id="sidebarToggle">
        <i class="fas fa-bars"></i>
    </button>

    <div class="sidebar-overlay" id="sidebarOverlay"></div>

    <div class="app-container">
        <div class="content-wrapper">
            <div class="sidebar-container" id="sidebarContainer">
                <div class="sidebar">
                    <h2>your library</h2>
                    <div class="create-playlist">
                        <form id="createPlaylistForm" enctype="multipart/form-data">
                            <div class="form-group">
                                <input type="text" id="title" name="title" class="form-control" placeholder="enter playlist title" required>
                            </div>
                            <div class="form-group">
                                <input type="file" id="coverFile" name="coverFile" class="form-control" accept="image/*">
                            </div>
                            <button type="submit" class="btn btn-success">create playlist</button>
                        </form>
                    </div>

                    <div class="playlists">
                        @foreach (var playlist in Model.Playlists)
                        {
                            <div class="playlist-item" data-playlist-id="@playlist.Id" onclick="selectPlaylist('@playlist.Id', '@playlist.Title')">
                                <div class="playlist-cover">
                                    <img src="@playlist.CoverUrl" alt="@playlist.Title">
                                </div>
                                <div class="playlist-info">
                                    <h4>@playlist.Title</h4>
                                    <p>@playlist.TrackCount tracks • @playlist.Duration</p>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="main-container">
                <div class="main-content">
                    <div id="uploadSection" class="upload-section" style="display: @(Model.IsPlaylistSelected ? "block" : "none");">
                        <h2>add to <span id="selectedPlaylistName"></span></h2>
                        <input type="hidden" id="selectedPlaylistId" value="@Model.SelectedPlaylistId" />

                        <div class="content-grid">
                            <!-- Left Panel - Record Track -->
                            <div class="panel">
                                <div class="panel-header">
                                    <div class="icon-circle">
                                        <i class="fas fa-microphone"></i>
                                    </div>
                                    <h3>record track</h3>
                                </div>
                                <div class="panel-content">
                                    <div class="form-group">
                                        <input type="text" id="recordingName" class="form-control" placeholder="enter track name">
                                    </div>
                                    <div class="recording-controls">
                                        <button id="startRecording" class="btn btn-success">Start Recording</button>
                                        <button id="stopRecording" class="btn btn-danger" disabled>Stop Recording</button>
                                    </div>
                                    <div id="recordingStatus"></div>
                                    <audio id="audioPlayback" controls style="display: none;"></audio>
                                </div>
                            </div>

                            <!-- Right Panel - Upload MP3 -->
                            <div class="panel">
                                <div class="panel-header">
                                    <div class="icon-circle">
                                        <i class="fas fa-upload"></i>
                                    </div>
                                    <h3>upload mp3</h3>
                                </div>
                                <div class="panel-content">
                                    <div class="file-upload">
                                        @Html.AntiForgeryToken()
                                        <input type="file" id="trackFile" accept=".mp3" class="form-control">
                                        <input type="text" id="uploadTrackName" class="form-control" placeholder="enter track name">
                                        <button onclick="uploadTrack()" class="btn btn-success">Upload Track</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Empty State -->
                    <div id="emptyState" class="empty-state" style="display: @(!Model.IsPlaylistSelected ? "block" : "none");">
                        <i class="fas fa-music"></i>
                        <h3>no playlist selected</h3>
                        <p>select a playlist from your library or create a new one to start adding tracks</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Footer Navigation -->
        <nav class="footer-nav">
            <a href="/Music" class="nav-item">
                <i class="fas fa-compact-disc"></i>
                <span>the vault</span>
            </a>
            <a href="/Music/Upload" class="nav-item">
                <i class="fas fa-upload"></i>
                <span>upload</span>
            </a>
            <a href="/Music/TuneIn" class="nav-item active">
                <i class="fas fa-broadcast-tower"></i>
                <span>tune in</span>
            </a>
            <a href="/Music/Profile" class="nav-item">
                <i class="fas fa-user"></i>
                <span>profile</span>
            </a>
        </nav>
    </div>

    <script>
        // Handle playlist creation
        document.getElementById("createPlaylistForm").addEventListener("submit", function (event) {
            event.preventDefault();

            var formData = new FormData();
            formData.append("title", document.getElementById("title").value);
            formData.append("coverFile", document.getElementById("coverFile").files[0]);

            fetch("/Music/CreateTuneInPlaylist", {
                method: "POST",
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.reload();
                } else {
                    alert('Error creating playlist: ' + data.message);
                }
            })
            .catch(error => {
                alert('Error creating playlist: ' + error.message);
            });
        });

        // Recording functionality
        let mediaRecorder;
        let audioChunks = [];
        let stream;
        let audioDuration = 0;
        let recordingStartTime;
        const startButton = document.getElementById('startRecording');
        const stopButton = document.getElementById('stopRecording');
        const audioPlayback = document.getElementById('audioPlayback');
        const recordingStatus = document.getElementById('recordingStatus');

        startButton.addEventListener('click', async () => {
            try {
                stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                mediaRecorder = new MediaRecorder(stream);
                audioChunks = [];
                recordingStartTime = Date.now();

                mediaRecorder.ondataavailable = (event) => {
                    audioChunks.push(event.data);
                };

                mediaRecorder.onstop = async () => {
                    const audioBlob = new Blob(audioChunks, { type: 'audio/mp3' });
                    audioPlayback.src = URL.createObjectURL(audioBlob);
                    audioPlayback.style.display = 'block';
                    
                    // Get final duration
                    audioDuration = (Date.now() - recordingStartTime) / 1000;
                    
                    // Stop all tracks in the stream
                    stream.getTracks().forEach(track => track.stop());
                    
                    await uploadRecording(audioBlob);
                };

                mediaRecorder.start();
                startButton.disabled = true;
                stopButton.disabled = false;
                recordingStatus.textContent = 'Recording...';
            } catch (error) {
                alert('Error accessing microphone: ' + error.message);
            }
        });

        stopButton.addEventListener('click', () => {
            if (mediaRecorder && mediaRecorder.state !== 'inactive') {
                mediaRecorder.stop();
                startButton.disabled = false;
                stopButton.disabled = true;
                recordingStatus.textContent = 'Recording stopped';
            }
        });

        async function uploadRecording(audioBlob) {
            const trackName = document.getElementById('recordingName').value.trim();
            const playlistId = document.getElementById('selectedPlaylistId').value;

            if (!trackName) {
                alert('Please enter a track name');
                return;
            }

            const formData = new FormData();
            formData.append('audioFile', audioBlob, 'recording.mp3');
            formData.append('trackName', trackName);
            formData.append('playlistId', playlistId);
            formData.append('duration', formatDuration(audioDuration));

            try {
                const response = await fetch('/Music/SaveTuneInRecording', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                if (result.success) {
                    alert('Recording uploaded successfully!');
                    document.getElementById('recordingName').value = '';
                    // Update track count
                    updatePlaylistTrackCount(playlistId);
                } else {
                    alert('Error uploading recording: ' + result.message);
                }
            } catch (error) {
                alert('Error uploading recording: ' + error.message);
            }
        }

        function selectPlaylist(id, title) {
            document.getElementById('selectedPlaylistId').value = id;
            document.getElementById('selectedPlaylistName').textContent = title;
            document.getElementById('uploadSection').style.display = 'block';
            document.getElementById('emptyState').style.display = 'none';
        }

        async function uploadTrack() {
            const trackFile = document.getElementById('trackFile').files[0];
            const trackName = document.getElementById('uploadTrackName').value.trim();
            const playlistId = document.getElementById('selectedPlaylistId').value;

            if (!trackFile || !trackName) {
                alert('Please fill in all fields');
                return;
            }

            const formData = new FormData();
            formData.append('trackFile', trackFile);
            formData.append('trackName', trackName);
            formData.append('playlistId', playlistId);
            formData.append('isRecording', 'false');
            formData.append('isTuneIn', 'true');

            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            try {
                const response = await fetch('/Music/UploadTrack', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'RequestVerificationToken': token
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                if (result.success) {
                    alert('Track uploaded successfully!');
                    document.getElementById('trackFile').value = '';
                    document.getElementById('uploadTrackName').value = '';
                    // Optionally refresh the playlist
                    window.location.reload();
                } else {
                    alert('Error uploading track: ' + (result.message || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error uploading track: ' + error.message);
            }
        }

        // Helper function to format duration
        function formatDuration(seconds) {
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = Math.floor(seconds % 60);
            return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
        }

        // Function to update playlist track count
        async function updatePlaylistTrackCount(playlistId) {
            try {
                const response = await fetch(`/Music/GetTuneInPlaylistInfo/${playlistId}`);
                const playlistInfo = await response.json();
                
                // Find and update the playlist item in the sidebar
                const playlistItem = document.querySelector(`[data-playlist-id="${playlistId}"]`);
                if (playlistItem) {
                    const trackCountElement = playlistItem.querySelector('.playlist-info p');
                    if (trackCountElement) {
                        trackCountElement.textContent = `${playlistInfo.trackCount} tracks • ${playlistInfo.duration}`;
                    }
                }
            } catch (error) {
                console.error('Error updating track count:', error);
            }
        }

        function uploadFile() {
            const fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.accept = 'audio/mp3';
            fileInput.style.display = 'none';
            document.body.appendChild(fileInput);

            fileInput.addEventListener('change', async function() {
                const file = this.files[0];
                if (!file) return;

                try {
                    // Create an audio element to get duration
                    const audio = document.createElement('audio');
                    audio.src = URL.createObjectURL(file);

                    // Wait for metadata to load to get duration
                    await new Promise((resolve, reject) => {
                        audio.addEventListener('loadedmetadata', () => resolve());
                        audio.addEventListener('error', () => reject(new Error('Error loading audio file')));
                    });

                    const duration = formatDuration(audio.duration);
                    const playlistId = document.getElementById('selectedPlaylistId').value;

                    if (!playlistId) {
                        throw new Error('No playlist selected');
                    }

                    const formData = new FormData();
                    formData.append('trackFile', file);
                    formData.append('trackName', file.name.replace('.mp3', ''));
                    formData.append('playlistId', playlistId);
                    formData.append('isRecording', 'false');
                    formData.append('duration', duration);
                    formData.append('isTuneIn', 'true');

                    const response = await fetch('/Music/UploadTrack', {
                        method: 'POST',
                        body: formData
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();
                    if (result.success) {
                        alert('Track uploaded successfully!');
                    } else {
                        alert('Error uploading track: ' + (result.message || 'Unknown error'));
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error uploading track: ' + error.message);
                } finally {
                    document.body.removeChild(fileInput);
                    URL.revokeObjectURL(audio?.src);
                }
            });

            fileInput.click();
        }
    </script>
</body>
</html> 