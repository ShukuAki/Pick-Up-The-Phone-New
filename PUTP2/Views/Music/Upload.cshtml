@model List<PUTP2.Models.PlaylistInfo>

@{
    ViewData["Title"] = "Upload";
    var playlistId = Context.Request.Query["playlistId"].ToString();
}

<div class="container">
    <h2>Upload</h2>
    <h3>Select Playlist</h3>

    <div class="playlists-grid">
        @foreach (var playlist in Model)
        {
            <div class="playlist-card" data-playlist-id="@playlist.Id" onclick="selectPlaylist('@playlist.Id', '@playlist.Title')">
                <div class="playlist-cover">
                    <img src="@playlist.CoverUrl" alt="@playlist.Title">
                    </div>
                                <div class="playlist-info">
                    <h4>@playlist.Title</h4>
                                    <p>@playlist.TrackCount tracks â€¢ @playlist.Duration</p>
                                </div>
                            </div>
                }
            </div>

    <!-- Upload/Record Form Section (Initially Hidden) -->
    <div id="uploadSection" class="upload-section mt-4" style="display: none;">
        <div class="card bg-dark text-white">
            <div class="card-body">
                <h3>Add to <span id="selectedPlaylistName"></span></h3>
                <input type="hidden" id="selectedPlaylistId" value="@playlistId" />
                @Html.AntiForgeryToken()
                
                <!-- Recording Section -->
                <div class="recording-section mb-4">
                    <h4>Record Track</h4>
                    <div class="form-group">
                        <input type="text" class="form-control mb-2" id="recordingName" placeholder="Enter track name">
                    </div>
                    <div class="controls">
                        <button id="startRecording" class="btn btn-primary">Start Recording</button>
                        <button id="stopRecording" class="btn btn-danger" disabled>Stop Recording</button>
                    </div>
                    <div id="recordingStatus" class="mt-2"></div>
                    <audio id="audioPlayback" controls style="display: none;" class="mt-2 w-100"></audio>
                </div>

                <hr class="border-secondary">

                <!-- Upload Section -->
                <div class="upload-section">
                    <h4>Or Upload MP3</h4>
                    <div class="form-group">
                        <label for="trackFile">Select MP3 File:</label>
                        <input type="file" class="form-control-file" id="trackFile" accept=".mp3" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="uploadTrackName">Track Name:</label>
                        <input type="text" class="form-control" id="uploadTrackName" required>
                    </div>

                    <button onclick="uploadTrack()" class="btn btn-primary">Upload Track</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Dark mode specific styles */
        [data-theme="dark"] .playlist-card {
            background: var(--bg-card);
        }

        [data-theme="dark"] .playlist-card:hover {
            transform: scale(1.02);
        }

        [data-theme="dark"] .playlist-card.selected {
            border: 2px solid var(--accent-color);
        }

        [data-theme="dark"] .form-control {
            background: var(--bg-secondary);
            border-color: #333;
            color: var(--text-primary);
        }

        [data-theme="dark"] .form-control:focus {
            background: var(--bg-secondary);
            border-color: var(--accent-color);
            color: var(--text-primary);
        }

        [data-theme="dark"] .upload-section .card {
            background: var(--bg-card);
        }

        .playlists-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
            padding: 20px;
        }

        .playlist-card {
            border-radius: 8px;
            padding: 15px;
            cursor: pointer;
            transition: transform 0.2s;
        }

        .playlist-cover img {
            width: 100%;
            aspect-ratio: 1;
            object-fit: cover;
            border-radius: 4px;
        }

        .playlist-info {
            margin-top: 10px;
        }

        .upload-section {
            max-width: 800px;
            margin: 0 auto;
            margin-bottom: 60px; /* Space for footer */
        }

        .recording-section, .upload-section {
            background: #2a2a2a;
            padding: 20px;
            border-radius: 8px;
        }

        audio {
            background: #1a1a1a;
            border-radius: 4px;
        }

        .controls {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        #uploadRecording {
            margin-left: auto;
        }
    </style>
}

@section Scripts {
    <script>
        // Recording functionality
        let mediaRecorder;
        let audioChunks = [];
        const startButton = document.getElementById('startRecording');
        const stopButton = document.getElementById('stopRecording');
        const audioPlayback = document.getElementById('audioPlayback');
        const recordingStatus = document.getElementById('recordingStatus');

        startButton.addEventListener('click', async () => {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                mediaRecorder = new MediaRecorder(stream);
                audioChunks = [];

                mediaRecorder.ondataavailable = (event) => {
                    audioChunks.push(event.data);
                };

                mediaRecorder.onstop = async () => {
                    const audioBlob = new Blob(audioChunks, { type: 'audio/mp3' });
                    audioPlayback.src = URL.createObjectURL(audioBlob);
                    audioPlayback.style.display = 'block';

                    // Auto upload the recording
                    await uploadRecording(audioBlob);
                };

                mediaRecorder.start();
                startButton.disabled = true;
                stopButton.disabled = false;
                recordingStatus.textContent = 'Recording...';
            } catch (error) {
                console.error('Error accessing microphone:', error);
                alert('Error accessing microphone: ' + error.message);
            }
        });

        stopButton.addEventListener('click', () => {
            mediaRecorder.stop();
            startButton.disabled = false;
            stopButton.disabled = true;
            recordingStatus.textContent = 'Recording stopped';
        });

        // Upload recorded audio
        async function uploadRecording(audioBlob) {
            const trackName = document.getElementById('recordingName').value.trim();
            const playlistId = document.getElementById('selectedPlaylistId').value;

            if (!trackName) {
                alert('Please enter a track name');
                return;
            }

            const formData = new FormData();
            formData.append('trackFile', audioBlob, `${trackName}.mp3`);
            formData.append('trackName', trackName);
            formData.append('playlistId', playlistId);
            formData.append('isRecording', 'true');

            await uploadFile(formData);
        }

        // Upload MP3 file
        async function uploadTrack() {
            const fileInput = document.getElementById('trackFile');
            const trackName = document.getElementById('uploadTrackName').value.trim();
            const playlistId = document.getElementById('selectedPlaylistId').value;

            if (!fileInput.files[0]) {
                alert('Please select a file');
                return;
            }

            if (!trackName) {
                alert('Please enter a track name');
                return;
            }

            const formData = new FormData();
            formData.append('trackFile', fileInput.files[0]);
            formData.append('trackName', trackName);
            formData.append('playlistId', playlistId);
            formData.append('isRecording', 'false');

            await uploadFile(formData);
        }

        // Common upload function
        async function uploadFile(formData) {
            try {
                // Get the antiforgery token
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                const response = await fetch('/Music/UploadTrack', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'RequestVerificationToken': token
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                if (result.success) {
                    alert('Track uploaded successfully!');
                    // Redirect back to the playlist
                    const playlistId = document.getElementById('selectedPlaylistId').value;
                    window.location.href = `/Music/Playlist/${playlistId}`;
                } else {
                    alert('Error uploading track: ' + result.message);
                }
            } catch (error) {
                console.error('Upload error:', error);
                alert('Error uploading track: ' + error.message);
            }
        }

        function selectPlaylist(playlistId, playlistName) {
            // Remove selected class from all playlist cards
            document.querySelectorAll('.playlist-card').forEach(card => {
                card.classList.remove('selected');
            });

            // Add selected class to clicked playlist
            const selectedCard = document.querySelector(`[data-playlist-id="${playlistId}"]`);
            selectedCard.classList.add('selected');

            // Show and update upload section
            document.getElementById('selectedPlaylistId').value = playlistId;
            document.getElementById('selectedPlaylistName').textContent = playlistName;
            document.getElementById('uploadSection').style.display = 'block';

            // Scroll to upload section smoothly
            document.getElementById('uploadSection').scrollIntoView({ behavior: 'smooth' });
        }
    </script>
} 