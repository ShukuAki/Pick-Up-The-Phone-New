@model PUTP2.Models.TuneInViewModel

@{
    ViewData["Title"] = "tune in";
    ViewData["HidePlayerBar"] = "true";
}

<div class="vault-container">
    <a href="/Music/Profile" class="profile-button">
        <i class="fas fa-user"></i>
    </a>

    <button class="view-toggle-button" id="viewToggle">
        <i class="fas fa-th"></i> <!-- Default to grid icon -->
    </button>

    <button class="dark-mode-toggle" id="darkModeToggle">
        <i class="fas fa-moon"></i>
    </button>

    <h1 class="vault-title">tune in</h1>

    <div class="filter-controls-container">
        <input type="text" id="playlistSearchInput" class="search-input" placeholder="Search playlists...">
        
        <div class="dropdown-container">
            <button class="dropdown-button" id="levelDropdownButton">
                <span>Levels</span> <i class="fas fa-chevron-down"></i>
            </button>
            <div class="dropdown-content" id="levelDropdownContent">
                <a href="#" data-level="all">All</a>
                <a href="#" data-level="1">Level 1</a>
                <a href="#" data-level="2">Level 2</a>
                <a href="#" data-level="3">Level 3</a>
            </div>
        </div>
    </div>
    
    @if (Model.Playlists != null && Model.Playlists.Any())
    {
        <div class="playlist-cards-container">
            <div class="playlist-cards-grid">
                @foreach (var playlist in Model.Playlists)
                {
                    <div class="playlist-card-wrapper" data-playlist-id="@playlist.Id">
                        <div class="playlist-card" data-level="@playlist.Level">
                            <div class="playlist-card-inner">
                                <div class="playlist-card-front">
                                    <div class="level-pattern"></div>
                                </div>
                                <div class="playlist-card-back">
                                    <div class="playlist-info">
                                        <h2>@playlist.Title</h2>
                                        <p>@playlist.TrackCount tracks â€¢ @playlist.Duration</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <button class="delete-playlist-btn" onclick="deletePlaylist('@playlist.Id', '@playlist.Title')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="empty-state">
            <i class="fas fa-music"></i>
            <p>No playlists yet. Create one to get started!</p>
            <a asp-controller="Music" asp-action="Upload" class="create-playlist-btn">Create Playlist</a>
        </div>
    }

    <a href="/Home/Splash" class="switch-view-button">
        <i class="fas fa-record-vinyl"></i>
        <span>the vault</span>
    </a>

    <a href="/Music/TuneInUpload" class="upload-button">
        <i class="fas fa-plus"></i>
    </a>
</div>

@section Styles {
    <style>
        /* Add styles for html and body */
        html, body {
            margin: 0;
            padding: 0;
            min-height: 100vh;
            background-color: var(--primary-bg);
            transition: background-color 0.3s ease;
        }

        :root {
            /* Light mode variables - using original colors */
            --primary-bg: #FAF4EF;
            --secondary-accent: #CFA8A2;
            --highlight: #F2C94C;
            --interactive: #88C9E6;
            --text-primary: #2E2E2E;
            --text-secondary: #666666;
            --borders: #B2675E;
            --card-bg: #FFFFFF;
        }

        [data-theme="dark"] {
            /* Dark mode variables */
            --primary-bg: #1C1C1C;
            --secondary-accent: #7F3B35;
            --highlight: #F2C94C;
            --interactive: #88C9E6;
            --text-primary: #FFE7D3;
            --text-secondary: #CFA8A2;
            --borders: #B2675E;
            --card-bg: #2B2B2B;
        }

        /* Add smooth transition for color changes */
        .vault-container,
        .playlist-cards-grid,
        .playlist-card-front,
        .playlist-card-back,
        .playlist-info,
        .playlist-info h2,
        .playlist-info p,
        .profile-button,
        .view-toggle-button,
        .dark-mode-toggle,
        .switch-view-button,
        .upload-button {
            transition: all 0.3s ease;
        }

        .dark-mode-toggle {
            position: absolute;
            top: 15px;
            right: 60px; /* Position it to the left of view-toggle-button */
            color: var(--text-primary); /* Reverted to theme variable */
            font-size: 18px;
            z-index: 10;
            background: var(--interactive); /* Reverted to blue theme variable */
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .dark-mode-toggle:hover {
            background: var(--highlight); /* Reverted to yellow theme variable */
            color: #000000; /* Keep text black on hover as requested previously */
            transform: scale(1.1);
        }

        .dark-mode-toggle i {
            transition: transform 0.3s ease;
        }

        [data-theme="dark"] .dark-mode-toggle i {
            transform: rotate(-45deg);
        }

        /* Update existing styles to use CSS variables */
        .vault-container {
            position: relative;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            background-color: var(--primary-bg);
            color: var(--text-primary);
        }

        .profile-button {
            position: absolute;
            top: 15px;
            left: 15px;
            color: var(--text-primary);
            font-size: 18px;
            text-decoration: none;
            z-index: 10;
            background: var(--interactive);
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .profile-button:hover {
            background: var(--highlight);
            transform: scale(1.1);
        }

        .vault-title {
            text-align: center;
            margin-top: 20px;
            margin-bottom: 15px; /* Reduced margin */
            font-size: 2.5em;
            color: var(--text-primary);
        }

        .filter-controls-container {
            display: flex;
            flex-direction: column; /* Stack vertically on small screens */
            align-items: center;
            margin-bottom: 25px;
            gap: 15px;
            padding: 0 20px;
        }

        .search-input {
            padding: 10px 15px;
            border-radius: 20px;
            border: 1px solid var(--borders);
            background-color: var(--card-bg);
            color: var(--text-primary);
            font-size: 1em;
            width: 100%;
            max-width: 400px; /* Limit width on larger screens */
            box-sizing: border-box;
            transition: all 0.3s ease;
        }

        .search-input:focus {
            outline: none;
            border-color: var(--interactive);
            box-shadow: 0 0 5px rgba(136, 201, 230, 0.5); /* Use interactive color for focus */
        }

        /* Remove old level button styles if they exist */
        .level-filter-buttons { display: none; }

        /* Dropdown Styles */
        .dropdown-container {
            position: relative;
            display: inline-block;
            width: 100%; /* Full width on small screens */
            max-width: 400px; /* Match search bar width on small screens */
        }

        .dropdown-button {
            background-color: #bf6713; /* Background: orange */
            color: #000000; /* Text color: black */
            padding: 10px 20px;
            font-size: 1em;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
            transition: background-color 0.3s ease;
        }

        .dropdown-button:hover {
            background-color: #f5e5d1; /* Background: light */
            color: #000000; /* Text color: black */
        }
        
        .dropdown-button i {
            margin-left: 8px;
            transition: transform 0.3s ease;
            color: #000000; /* Ensure chevron is black */
        }

        .dropdown-container.open .dropdown-button i {
             transform: rotate(180deg);
        }

        .dropdown-content {
            display: none;
            position: absolute;
            background-color: var(--card-bg);
            min-width: 160px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 100;
            border-radius: 8px;
            overflow: hidden; /* Ensures content respects border radius */
            margin-top: 5px;
            border: 1px solid var(--borders);
            width: 100%; /* Match button width */
        }

        .dropdown-content a {
            color: var(--text-primary);
            padding: 12px 16px;
            text-decoration: none;
            display: block;
            transition: background-color 0.2s ease;
        }

        .dropdown-content a:hover {
            background-color: var(--interactive);
            color: var(--text-primary); /* Ensure text remains readable */
        }

        /* Responsive adjustments */
        @@media (min-width: 768px) {
            .filter-controls-container {
                flex-direction: row;
                justify-content: space-between;
                max-width: 800px;
                margin-left: auto;
                margin-right: auto;
            }

            .search-input {
                width: auto;
                flex-grow: 1;
                margin-right: 20px;
                max-width: none;
            }

            .dropdown-container {
                width: auto; /* Auto width on larger screens */
                max-width: none;
            }

            .dropdown-button {
                width: auto; /* Auto width for button content */
                min-width: 120px; /* Ensure reasonable minimum width */
            }

            .dropdown-content {
                width: auto; /* Auto width for content */
            }
        }

        .playlist-cards-container {
            position: relative;
            overflow: hidden;
            background-color: var(--primary-bg);
        }

        .playlist-cards-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
            padding: 20px;
            background-color: var(--primary-bg);
        }

        .playlist-card-wrapper {
            width: 200px;
            height: 280px;
            perspective: 1000px;
            cursor: pointer;
            position: relative;
            background: transparent;
        }

        .playlist-card {
            position: relative;
            width: 100%;
            height: 100%;
            transform-style: preserve-3d;
            cursor: pointer;
            background: transparent;
        }

        .playlist-card-inner {
            position: relative;
            width: 100%;
            height: 100%;
            transition: transform 2s ease;
            transform-style: preserve-3d;
        }

        .playlist-card-wrapper:hover .playlist-card-inner {
            transform: rotateY(180deg);
        }

        .playlist-card-front, .playlist-card-back {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            border-radius: 15px;
            /* Keep base shadow */
            box-shadow: 0 4px 8px rgba(178, 103, 94, 0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            /* Add transition for shadow */
            transition: box-shadow 0.3s ease;
        }

        .playlist-card-front {
            /* Add the background color here */
            background-color: var(--card-bg);
        }

        .playlist-card-back {
            transform: rotateY(180deg);
            padding: 20px;
             /* Ensure back has a contrasting background if needed */
             /* background-color: var(--bg-secondary); */ /* Example */
        }

        /* Keep hover and active shadow effects */
        .playlist-card-wrapper:hover .playlist-card-front,
        .playlist-card-wrapper:hover .playlist-card-back {
            box-shadow: 0 8px 20px rgba(178, 103, 94, 0.35);
        }

        .playlist-card-wrapper:active .playlist-card-front,
        .playlist-card-wrapper:active .playlist-card-back {
             box-shadow: 0 2px 5px rgba(178, 103, 94, 0.25); 
        }

        .level-pattern {
            width: 100%;
            height: 100%;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            /* Remove the background color from here */
            /* background-color: var(--accent-color); */
            /* Optional: Add transparency to pattern if needed */
            /* opacity: 0.8; */ 
        }

        /* Level 1 playlists */
        [data-level="1"] .level-pattern {
            background-image: url('/images/level 01-pattern.jpg');
        }

        [data-level="1"] .playlist-card-front,
        [data-level="1"] .playlist-card-back {
            border: 2px solid var(--interactive-color);
        }

        [data-level="1"] .playlist-card-back {
            background: linear-gradient(135deg, var(--bg-secondary), var(--secondary-accent));
        }

        /* Level 2 playlists */
        [data-level="2"] .level-pattern {
            background-image: url('/images/level 02-pattern.jpg');
        }

        [data-level="2"] .playlist-card-front,
        [data-level="2"] .playlist-card-back {
            border: 2px solid var(--interactive-color);
        }

        [data-level="2"] .playlist-card-back {
            background: linear-gradient(135deg, var(--accent-color), var(--secondary-accent));
        }

        /* Level 3 playlists */
        [data-level="3"] .level-pattern {
            background-image: url('/images/level 03-pattern.jpg');
        }

        [data-level="3"] .playlist-card-front,
        [data-level="3"] .playlist-card-back {
            border: 2px solid var(--highlight-color);
        }

        [data-level="3"] .playlist-card-back {
            background: linear-gradient(135deg, var(--secondary-accent), var(--accent-color));
        }

        .playlist-info {
            text-align: center;
            color: var(--text-primary);
        }

        .playlist-info h2 {
            margin: 0;
            font-size: 24px;
            color: var(--text-primary);
            margin-bottom: 10px;
        }

        .playlist-info p {
            margin: 5px 0 0;
            font-size: 14px;
            color: var(--text-secondary);
        }

        .delete-playlist-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background: var(--text-secondary);
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            color: var(--bg-primary);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: 10;
        }

        .playlist-card-wrapper:hover .delete-playlist-btn {
            opacity: 1;
        }

        .delete-playlist-btn:hover {
            background: var(--accent-color);
        }

        .switch-view-button {
            position: fixed;
            bottom: 80px;
            left: 50%;
            transform: translateX(-50%);
            background: #bf6713; /* Background: orange */
            color: #000000; /* Text color: black */
            text-decoration: none;
            padding: 8px 16px;
            border-radius: 20px;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
            z-index: 999;
        }

        .switch-view-button:hover {
            background: #f5e5d1; /* Background: light */
            color: #000000; /* Text color: black */
            transform: translateX(-50%) scale(1.05);
        }

        .switch-view-button i {
            font-size: 16px;
            color: #000000; /* Icon color: black */
            transition: color 0.3s ease; /* Add transition for icon color */
        }

        .switch-view-button:hover i {
            color: #000000; /* Icon color on hover: black */
        }

        .upload-button {
            position: fixed;
            bottom: 80px;
            right: 20px;
            background: var(--interactive); /* Reverted to blue theme variable */
            color: var(--text-primary); /* Reverted to theme variable */
            text-decoration: none;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            transition: all 0.3s ease;
            z-index: 999;
        }

        .upload-button:hover {
            background: var(--highlight); /* Reverted to yellow theme variable */
            color: #000000; /* Keep text black on hover as requested previously */
            transform: scale(1.1);
        }

        .empty-state {
            text-align: center;
            padding: 40px;
            color: var(--text-primary);
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .empty-state i {
            font-size: 48px;
            margin-bottom: 20px;
            color: var(--interactive);
        }

        .empty-state p {
            margin-bottom: 20px;
            font-size: 18px;
        }

        .create-playlist-btn {
            display: inline-block;
            padding: 10px 20px;
            background: var(--interactive);
            color: var(--text-primary);
            text-decoration: none;
            border-radius: 20px;
            transition: all 0.3s ease;
        }

        .create-playlist-btn:hover {
            background: var(--highlight);
            transform: scale(1.05);
        }

        .view-toggle-button {
            position: absolute;
            top: 15px;
            right: 15px;
            color: var(--text-primary);
            font-size: 18px;
            z-index: 10;
            background: var(--interactive);
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: none; /* Hidden by default, shown on mobile */
            align-items: center;
            justify-content: center;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .view-toggle-button:hover {
            background: var(--highlight);
            transform: scale(1.1);
        }

        @@media (max-width: 768px) {
            .view-toggle-button {
                display: flex; /* Show button on mobile */
            }

            .playlist-cards-container {
                width: 100%;
                /* overflow: hidden; */ /* Keep this commented/removed or vertical scroll won't work */
            }

            /* Default mobile view: side-scroll */
            .playlist-cards-grid.side-scroll {
                display: flex;
                overflow-x: auto;
                scroll-snap-type: x mandatory;
                -webkit-overflow-scrolling: touch;
                padding: 20px;
                gap: 20px;
                width: 100%;
                align-items: center;
                scrollbar-width: none;
                -ms-overflow-style: none;
            }

            .playlist-cards-grid.side-scroll::-webkit-scrollbar {
                display: none;
            }

            .playlist-cards-grid.side-scroll .playlist-card-wrapper {
                flex: 0 0 65vw;
                width: 65vw;
                height: auto;
                aspect-ratio: 2 / 3;
                scroll-snap-align: center;
                transform: scale(0.85);
                opacity: 0.5;
                transition: all 0.3s ease;
            }

            .playlist-cards-grid.side-scroll .playlist-card-wrapper.active {
                transform: scale(1);
                opacity: 1;
            }

            /* Grid view for mobile */
            .playlist-cards-grid.grid-view {
                display: grid;
                grid-template-columns: repeat(3, 1fr);
                gap: 15px;
                padding: 15px;
                overflow-x: hidden; /* Prevent horizontal scroll in grid */
                width: auto;
            }

            .playlist-cards-grid.grid-view .playlist-card-wrapper {
                flex: 1 1 calc(33.333% - 15px);
                width: auto;
                height: auto;
                aspect-ratio: 2 / 3;
                transform: scale(1);
                opacity: 1;
                /* Reset side-scroll specific styles */
                scroll-snap-align: initial;
            }

            /* Remove the active scaling effect in grid view */
            .playlist-cards-grid.grid-view .playlist-card-wrapper.active {
                 transform: scale(1);
                 opacity: 1;
            }
        }
    </style>
}

@section Scripts {
    <script>
        function deletePlaylist(id, title) {
            const modal = document.createElement('div');
            modal.className = 'modal';
            modal.innerHTML = `
                <div class="modal-content">
                    <h3>Delete Playlist</h3>
                    <p>Are you sure you want to delete "${title}"?</p>
                    <p>This action cannot be undone.</p>
                    <div class="modal-buttons">
                        <button class="confirm-delete" onclick="confirmDelete('${id}')">Delete</button>
                        <button class="cancel-delete" onclick="closeModal()">Cancel</button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            modal.style.display = 'block';
        }

        function closeModal() {
            const modal = document.querySelector('.modal');
            if (modal) {
                modal.remove();
            }
        }

        async function confirmDelete(id) {
            try {
                const response = await fetch(`/Music/DeletePlaylist?id=${id}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const result = await response.json();
                if (result.success) {
                    const playlistCard = document.querySelector(`[data-playlist-id="${id}"]`);
                    if (playlistCard) {
                        playlistCard.remove();
                    }
                    alert('Playlist deleted successfully!');
                    window.location.reload();
                } else {
                    alert('Error deleting playlist: ' + result.message);
                }
            } catch (error) {
                alert('Error deleting playlist: ' + error.message);
            } finally {
                closeModal();
            }
        }

        document.addEventListener('click', function(event) {
            const modal = document.querySelector('.modal');
            if (modal && event.target === modal) {
                closeModal();
            }
        });

        document.addEventListener('DOMContentLoaded', function() {
            if (window.matchMedia('(max-width: 768px)').matches) {
                const container = document.querySelector('.playlist-cards-grid');
                const cards = Array.from(container.querySelectorAll('.playlist-card-wrapper'));
                
                function updateActiveCard() {
                    const middle = container.scrollLeft + (container.offsetWidth / 2);
                    let closestCard = null;
                    let closestDistance = Infinity;
                    
                    cards.forEach(card => {
                        const cardMiddle = card.offsetLeft + (card.offsetWidth / 2);
                        const distance = Math.abs(middle - cardMiddle);
                        
                        if (distance < closestDistance) {
                            closestDistance = distance;
                            closestCard = card;
                        }
                        
                        card.classList.remove('active');
                    });
                    
                    if (closestCard) {
                        closestCard.classList.add('active');
                    }
                }

                // Handle scroll events
                let scrollTimeout;
                container.addEventListener('scroll', () => {
                    clearTimeout(scrollTimeout);
                    scrollTimeout = setTimeout(updateActiveCard, 100);
                }, { passive: true });

                // Initial setup
                updateActiveCard();
                
                // Handle window resize
                window.addEventListener('resize', updateActiveCard, { passive: true });
            }

            // Handle click events (excluding delete button)
            const playlistCards = document.querySelectorAll('.playlist-card-wrapper');
            playlistCards.forEach(card => {
                card.addEventListener('click', function(e) {
                    if (e.target.closest('.delete-playlist-btn')) return;
                    
                    const playlistId = this.dataset.playlistId;
                    window.location.href = `/Music/TuneInPlaylist/${playlistId}`;
                });
            });

            // Keep existing active card logic for side-scroll view 
            const container = document.querySelector('.playlist-cards-grid');
            const cards = Array.from(container.querySelectorAll('.playlist-card-wrapper'));
            let scrollTimeout;

            function updateActiveCard() {
                if (!container.classList.contains('side-scroll')) return; // Only run for side-scroll

                const middle = container.scrollLeft + (container.offsetWidth / 2);
                let closestCard = null;
                let closestDistance = Infinity;
                
                cards.forEach(card => {
                    const cardMiddle = card.offsetLeft + (card.offsetWidth / 2);
                    const distance = Math.abs(middle - cardMiddle);
                    
                    if (distance < closestDistance) {
                        closestDistance = distance;
                        closestCard = card;
                    }
                    
                    card.classList.remove('active');
                });
                
                if (closestCard) {
                    closestCard.classList.add('active');
                }
            }

            function setupSideScrollActivation() {
                if (window.matchMedia('(max-width: 768px)').matches && container.classList.contains('side-scroll')) {
                    container.addEventListener('scroll', handleScroll, { passive: true });
                    updateActiveCard(); // Initial check
                    window.addEventListener('resize', updateActiveCard, { passive: true });
                } else {
                    container.removeEventListener('scroll', handleScroll);
                    window.removeEventListener('resize', updateActiveCard);
                    // Remove active class from all cards if not side-scrolling
                    cards.forEach(card => card.classList.remove('active'));
                }
            }

            function handleScroll() {
                clearTimeout(scrollTimeout);
                scrollTimeout = setTimeout(updateActiveCard, 100);
            }

            // --- View Toggle Logic --- 
            const viewToggle = document.getElementById('viewToggle');
            const playlistGrid = document.querySelector('.playlist-cards-grid');
            let isGridView = false; // Default to side-scroll on mobile

            viewToggle.addEventListener('click', function() {
                isGridView = !isGridView;
                playlistGrid.classList.toggle('grid-view', isGridView);
                playlistGrid.classList.toggle('side-scroll', !isGridView);
                
                // Update button icon
                viewToggle.innerHTML = isGridView ? 
                    '<i class="fas fa-list"></i>' : 
                    '<i class="fas fa-th"></i>';
                
                // Re-evaluate side-scroll activation logic after view change
                setupSideScrollActivation(); 
            });

            // Initialize view based on screen size and setup listeners
            function updateViewOnResize() {
                 // Check if we are on mobile
                 if (window.innerWidth <= 768) {
                     // If mobile, ensure default is side-scroll unless manually toggled
                     if (!playlistGrid.classList.contains('grid-view')) {
                         playlistGrid.classList.add('side-scroll');
                         isGridView = false;
                         viewToggle.innerHTML = '<i class="fas fa-th"></i>';
                     }
                 } else {
                     // If desktop, remove mobile-specific classes
                     playlistGrid.classList.remove('side-scroll');
                     playlistGrid.classList.remove('grid-view');
                     isGridView = false;
                 }
                 // Setup or remove scroll listeners based on current state
                 setupSideScrollActivation(); 
            }

            // Initial setup on load
            updateViewOnResize(); 
            window.addEventListener('resize', updateViewOnResize);

            // --- Search and Filter Logic --- 
            const searchInput = document.getElementById('playlistSearchInput');
            // Dropdown elements
            const levelDropdownButton = document.getElementById('levelDropdownButton');
            const levelDropdownContent = document.getElementById('levelDropdownContent');
            const levelDropdownContainer = levelDropdownButton.closest('.dropdown-container'); // Get container
            const dropdownLinks = levelDropdownContent.querySelectorAll('a');
            
            const allPlaylistCards = document.querySelectorAll('.playlist-card-wrapper');
            let currentLevelFilter = 'all';
            let currentSearchTerm = '';
            let searchTimeout;

            function filterPlaylists() {
                allPlaylistCards.forEach(card => {
                    const level = card.querySelector('.playlist-card').dataset.level || '0'; // Get level
                    const titleElement = card.querySelector('.playlist-info h2');
                    const title = titleElement ? titleElement.textContent.toLowerCase() : '';

                    const levelMatch = currentLevelFilter === 'all' || level === currentLevelFilter;
                    const searchMatch = currentSearchTerm === '' || title.includes(currentSearchTerm);

                    if (levelMatch && searchMatch) {
                        card.style.display = ''; // Show card
                    } else {
                        card.style.display = 'none'; // Hide card
                    }
                });
            }

            // Search Input Handler
            searchInput.addEventListener('input', () => {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    currentSearchTerm = searchInput.value.toLowerCase().trim();
                    filterPlaylists();
                }, 300); // Debounce search input
            });

            // --- Dropdown Logic --- 
            levelDropdownButton.addEventListener('click', (event) => {
                event.stopPropagation(); // Prevent click from immediately closing dropdown
                const isOpen = levelDropdownContent.style.display === 'block';
                levelDropdownContent.style.display = isOpen ? 'none' : 'block';
                levelDropdownContainer.classList.toggle('open', !isOpen);
            });

            dropdownLinks.forEach(link => {
                link.addEventListener('click', (event) => {
                    event.preventDefault(); // Prevent page jump
                    currentLevelFilter = link.dataset.level;
                    levelDropdownButton.querySelector('span').textContent = link.textContent; // Update button text
                    levelDropdownContent.style.display = 'none'; // Hide dropdown
                     levelDropdownContainer.classList.remove('open');
                    filterPlaylists();
                });
            });

            // Close dropdown if clicked outside
            window.addEventListener('click', (event) => {
                 if (!levelDropdownContainer.contains(event.target)) {
                    levelDropdownContent.style.display = 'none';
                    levelDropdownContainer.classList.remove('open');
                }
            });

            // Initial filter call 
            filterPlaylists(); 
            
            // --- View Toggle Logic --- 
            // ... rest of the view toggle code ...
        });

        function uploadTrack(playlistId) {
            const fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.accept = 'audio/*';
            fileInput.style.display = 'none';
            document.body.appendChild(fileInput);

            fileInput.addEventListener('change', async (e) => {
                const file = e.target.files[0];
                if (!file) return;

                const trackName = file.name.replace(/\.[^/.]+$/, ""); // Remove extension
                const formData = new FormData();
                formData.append('trackFile', file);
                formData.append('trackName', trackName);
                formData.append('playlistId', playlistId);
                formData.append('isTuneIn', 'true'); // Mark as Tune In track

                try {
                    const response = await fetch('/Music/UploadTrack', {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.json();
                    if (result.success) {
                        location.reload(); // Refresh to show new track
                    } else {
                        alert(result.message || 'Error uploading track');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error uploading track');
                }

                document.body.removeChild(fileInput);
            });

            fileInput.click();
        }

        function recordTrack(playlistId) {
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                alert('Recording is not supported in your browser');
                return;
            }

            navigator.mediaDevices.getUserMedia({ audio: true })
                .then(stream => {
                    const mediaRecorder = new MediaRecorder(stream);
                    const audioChunks = [];

                    mediaRecorder.addEventListener('dataavailable', event => {
                        audioChunks.push(event.data);
                    });

                    mediaRecorder.addEventListener('stop', async () => {
                        const audioBlob = new Blob(audioChunks, { type: 'audio/mp3' });
                        const formData = new FormData();
                        formData.append('trackFile', audioBlob, 'recording.mp3');
                        formData.append('trackName', 'New Recording');
                        formData.append('playlistId', playlistId);
                        formData.append('isRecording', 'true');
                        formData.append('isTuneIn', 'true'); // Mark as Tune In track

                        try {
                            const response = await fetch('/Music/UploadTrack', {
                                method: 'POST',
                                body: formData
                            });

                            const result = await response.json();
                            if (result.success) {
                                location.reload(); // Refresh to show new track
                            } else {
                                alert(result.message || 'Error saving recording');
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            alert('Error saving recording');
                        }
                    });

                    mediaRecorder.start();
                    alert('Recording started. Click OK to stop recording.');
                    setTimeout(() => {
                        mediaRecorder.stop();
                        stream.getTracks().forEach(track => track.stop());
                    }, 10000); // Record for 10 seconds
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error accessing microphone');
                });
        }

        // Dark mode functionality
        document.addEventListener('DOMContentLoaded', () => {
            const darkModeToggle = document.getElementById('darkModeToggle');
            const htmlElement = document.documentElement;
            
            // Check for saved theme preference
            const savedTheme = localStorage.getItem('theme');
            if (savedTheme) {
                htmlElement.setAttribute('data-theme', savedTheme);
                if (savedTheme === 'dark') {
                    darkModeToggle.querySelector('i').classList.replace('fa-moon', 'fa-sun');
                }
            }

            // Toggle dark mode
            darkModeToggle.addEventListener('click', () => {
                const currentTheme = htmlElement.getAttribute('data-theme');
                const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
                const icon = darkModeToggle.querySelector('i');
                
                htmlElement.setAttribute('data-theme', newTheme);
                localStorage.setItem('theme', newTheme);
                
                // Toggle icon
                if (newTheme === 'dark') {
                    icon.classList.replace('fa-moon', 'fa-sun');
                } else {
                    icon.classList.replace('fa-sun', 'fa-moon');
                }
            });
        });
    </script>
} 